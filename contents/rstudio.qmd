# RStudio

## Hello RStudio

เมื่อได้ติดตั้ง RStudio แล้วจาก @sec-install-rstudio ให้เปิด RStudio application ที่มีหน้าตาแบบ @fig-rstudio-app

![RStudio App](/images/rstudio/RStudio-app-logo.png){#fig-rstudio-app width="25%"}

จะเห็นหน้าต่างในรูปแบบ @fig-rstudio-panes ซึ่งจะเห็นมีอยู่ 3 pane (หน้าต่าง)


![RStudio User Interface](/images/rstudio/rstudio-panes.png){#fig-rstudio-panes}


ให้ลองไปที่ menu bar ด้านบน icon ซ้ายสุด คลิก แล้วกดปุ่มสร้าง R Script ดัง @fig-create-r-script
(หรือใช้ keyboard shortcut `Ctr-Shift-N` [Windows], `Cmd-Shift-N` [Mac])

![New R Script](/images/rstudio/create-r-script.png){#fig-create-r-script width="100%"}

## RStudio Panes

![Default RStudio Panes Layout](/diagrams/rstudio-panes-tut.drawio.svg){#fig-rstudio-panes-tut width="100%"}

จะเห็น **RStudio pane** ครบทั้ง 4 หน้าต่างดัง @fig-rstudio-panes-tut มีหน้าที่การใช้งานดังนี้

### Console pane

**Console pane** จะทำงานลักษณะเป็น **REPL** (read-eval-print loop) คือไว้สำหรับพิมพ์ code เข้าไป กด `Enter` จากนั้น output ก็จะแสดงออกมาทันที เหมาะสำหรับการ run code ที่ไม่ซับซ้อนมาก อย่างรวดเร็ว เพียงชั่วครู่ ที่เราไม่ต้องการ record เก็บไว้

เครื่องหมาย `>` ใน console เรียกว่า **prompt** เป็นจุดที่เราจะเขียน code เข้าไป

ให้ลองพิมพ์ `1 + 1` ที่ Console หลังจาก `>` และเคาะ `Enter` ควรจะเห็นผลลัพท์แบบนี้

```r
> 1 + 1
[1] 2
```

ในบรรทัดแรก `1 + 1` คือคำสั่ง R code ที่เราป้อนให้ R console ซึ่งจะส่งให้ R interpreter ประมวลผล (execute) หรือ **Run code** ที่เราส่งเข้าไป และส่ง output ออกมาในบรรทัดถัดมา ได้ผลลัพท์เป็น `2` นั่นเอง

ลองป้อนคำสั่งการคิดเลขอื่นๆ ต่างๆ ดูเช่น `2 * 3`, `10 / 5` จะเห็นว่า Console นี้เหมาะสำหรับการใช้เป็นเครื่องคิดเลขอย่างง่ายได้เลย

::: {.callout-tip}
#### Keyboard Shortcut
ลองนำ cursor ไว้ที่ Console และกด **up / down arrow** ใน keybord ดู จะเห็นว่าเราสามารถ browse history ของคำสั่งก่อนหน้าได้อย่างรวดเร็วใน console ได้ด้วย
:::

สิ่งที่พิมพ์เข้าไปใน console จะหายไปได้ง่าย จะไม่ได้ถูก save เก็บไว้เป็น file ดังนั้นหากเราต้องการเขียน code ที่ซับซ้อนมากขึ้น หรือต้องการเก็บผลลัพท์เพื่อ **reproducibily** ก็ควรจะเขียนเป็น **Script file** ใน Source pane ที่จะกล่าวถัดไป

### Source pane

**Source pane** เป็นสถานที่ไว้สำหรับเขียน code ที่เราสามารถ save เก็บเป็น script file ได้ โดยจะเป็นที่หลักที่เราจะเขียน code กัน เมื่อเรา execute หรือ **run code** แล้ว ผลลัพท์ที่ได้ก็จะส่งออกไปที่ต่างๆ เช่น ถ้าเป็น text จะส่งออกไปที่ console pane ถ้าเป็น plot ก็จะส่งไปที่ plot pane เป็นต้น

หากทำตาม step ดัง @fig-create-r-script เราจะมีไฟล์ R script ที่เปิดไว้ให้เราอยู่แล้วใน Source pane 

ในบรรทัดที่ 1 ของ R Script ที่อยู่ใน Source pane ให้พิมพ์คำสั่ง:

```r
print("Hello, World")
```
 
จากนั้น **Run code** (cursor ยังอยู่ในบรรทัดที่ 1) โดยกดปุ่ม **Run** (วงสีแดง @fig-rstudio-panes-tut) หรือกด `Ctr/Cmd-Enter` โดยจะเป็นการส่ง code ทีละบรรทัดไป execute ที่ R console 

ใน R console จะเห็นว่าหลัง prompt `>` จะมี `print("Hello, World")` ที่ถูกส่งเข้ามาจาก R Script และเมื่อ run code แล้วก็ได้ผลลัพท์ print ออกมาเป็น "Hello, World" ในบรรทัดถัดมา:


```r
> print("Hello, World")
[1] "Hello, World"
```


::: {.callout-tip}
#### Keyboard Shortcut

-   **`Ctr/Cmd-Enter`**: Run code ในบรรทัดที่ cursor วางอยู่ *หรือ* run code เฉพาะจุดได้โดยลาก cursor คลุม code ที่เราต้องการจะ run จากนั้นกด `Ctr/Cmd-Enter`

-   **`Ctr/Cmd-Shift-Enter`**: Source R Script with Echo จะเป็นการ Run code ใน R Script ทั้งไฟล์และส่งผลลัพท์ในแต่ละบรรทัดออกมา
:::


### Other panes

Pane อื่นๆ ที่เหลือใน @fig-rstudio-panes-tut สำหรับผู้เริ่มต้นแนะนำให้ข้ามในส่วนนี้ไปก่อน ส่วนใหญ่จะทำหน้าที่ตามชื่อที่ตั้งไว้ ขออธิบายเฉพาะที่ได้ใช้บ่อยดังนี้:

-   **Files:** เป็น file explorer อย่างง่าย เหมาะสำหรับดูไฟล์ต่างๆ ใน R project ของเราได้อย่างรวดเร็ว (อธิบายต่อใน @sec-create-r-proj)

-   **Plots:** แสดง plot จาก code ที่เรา run ให้สร้างกราฟ

-   **Help:** แสดง manual หรือวิธีใช้งานของ R code ต่างๆ สามารถดูได้โดย

    -   พิมพ์ `?` ตามด้วยคำสั่งที่เราต้องการ เช่น `?lm` ใน R console แล้ว `Enter`, หรือ

    -   พิมพ์คำสั่งที่ต้องการใน search box ใน Help pane โดยตรง



## R Project {#sec-r-proj}

ใน RStudio เราสามารถสร้าง **R project** ซึ่งเปรียบเสมือน "workspace" ที่บรรจุเอกสารและข้อมูลต่างๆ ในงานแต่ละชิ้นที่เราทำ เป็นการจัดระเบียบและไม่ให้ข้อมูลจากแต่ละ project มาปะปนกัน @fig-r-proj-concept

![R Project concept](/images/rstudio/r-proj-concept.svg){#fig-r-proj-concept width="100%"}

### Create R Project {#sec-create-r-proj}

เราลองมาสร้าง R project ใหม่สำหรับ R tutorial นี้กันเลยดีกว่า

ในแถบเมนูด้านบนซ้าย click **ปุ่มสีฟ้ารูปกล่อง** ที่มีตัว R (ปุ่มที่ 2 จากด้านซ้าย)

![RStudio menu bar](/images/rstudio/rstudio-menu-bar.png){#fig-rstudio-menu-bar width="100%"}

จากนั้นทำตามขั้นตอนดังกล่าว:

1. Click **`New Directory`**: เพื่อเลือกที่จะสร้าง R project ใน folder ใหม่

2. Click **`New Project`**: เพื่อสร้าง R project ในรูปแบบปกติ

3. Click **`Browse...`**: ในการเลือกตำแหน่งที่ R project folder นั้นจะถูกสร้างขึ้น

4.  ช่อง **Directory name:** ให้พิมพ์ชื่อ project ที่ต้องการ แนะนำให้ตั้งชื่อที่ไม่มีเว้นวรรค โดยให้ใช้ underscore `_` หรือ dash `-` ในการแยกคำแทน


![Create `learn-r` R project directory in my Desktop](/images/rstudio/create-proj.png){#fig-create-project width="100%"}

ในตัวอย่าง @fig-create-project ได้สร้าง `learn-r` project ใน Desktop ให้พิมพ์ชื่อที่ต้องการ จากนั้น Click **Create Project** จะเป็นการสร้างและเปิด R project ใหม่ขึ้นมา


### R project structure

R project นั้นเป็นเพียงแค่ folder ที่มีไฟล์รูปกล่องสีฟ้าที่ลงท้ายด้วย `.Rproj` อยู่


![Files pane of `learn-r` R project](/images/rstudio/learn-r-file.png){#fig-learn-r-file width="100%"}

@fig-learn-r-file แสดงโครงสร้างไฟล์เริ่มต้นใน R project ซึ่งเป็น folder ชื่อ `learn-r` และด้านในมีไฟล์ `learn-r.Rproj` ซึ่งเป็นไฟล์ที่บ่งบอกว่า folder นี้คือ RStudio project

และหากต้องการเปิด R project ไหน ก็ให้ double click ที่ไฟล์ `.Rproj` นี้


## Recommended Settings

ต่อไปนี้จะแนะนำ RStudio setting ที่ช่วยให้การทำงานสะดวกขึ้น สามารถเข้าสู่ setting ได้จาก ไปที่แถบเมนู:

> `Tools` -> `Global Options...`

### Code

ไปที่แถบ `Code` ด้านซ้าย เลือก `Display` ด้านบน

แนะนำให้ติ๊กถูก 2 อย่างนี้ (@fig-rstudio-set-code-fn-rainbox) จะเป็นการเพิ่ม syntax highlighting ที่วงเล็บและ function call

![Rainbox parenthesis & Function call highlight](/images/rstudio/set-code-hl-rainbow.png){#fig-rstudio-set-code-fn-rainbox width="60%"}

### Theme

ไปที่แถบ `Appearance` ด้านซ้าย จะให้เลือก theme หรือ font ของ editor ที่ต้องการได้ ลองเลือกตามแบบที่ชอบ (@fig-rstudio-set-theme)

![RStudio theme](/images/rstudio/set-rstheme.png){#fig-rstudio-set-theme width="80%"}

หากต้องการตัวเลือก theme เพิ่มเติม แนะนำ [`{rsthemes}`](https://github.com/gadenbuie/rsthemes) package

### Pane Layout

เนื่องจากจอ computer ส่วนใหญ่เป็นจอที่กว้างมากกว่ายาว ดังนั้นการเขียน code ใน script อาจมีพื้นที่จำกัด แนะนำให้ย้ายตำแหน่ง R console ไปด้านขวา จะช่วยเพิ่มพื้นที่ในแนวตั้งสำหรับการเขียน code ได้ ([@fig-rstudio-set-pane; @fig-rstudio-panes-dark])

![Console to the upper-right](/images/rstudio/set-pane-layout.png){#fig-rstudio-set-pane width="80%"}

![Output of my preferred RStudio panes setting](/images/rstudio/rstudio-panes-dark.png){#fig-rstudio-panes-dark width="100%"}
